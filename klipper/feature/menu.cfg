[menu __main __octoprint]
type: disabled

[delayed_gcode shutdown_machine]
gcode:
     {action_call_remote_method("shutdown_machine")}
initial_duration: 0.0

[menu __main __setup __restart __host_shutdown]
type: command
enable: {printer.idle_timeout.state != "Printing"}
name: Shutdown host
gcode:
    M117 Shutdown
    M118 Shutdown
    { menu.exit() }
    UPDATE_DELAYED_GCODE ID=shutdown_machine DURATION=1

[menu __main __temp __preheat_pla]
type: disabled

[menu __main __temp __preheat_abs]
type: disabled

[menu __main __temp __cooldown __all]
type: command
name: Cooldown all
gcode: TURN_OFF_HEATERS

[gcode_macro PID_HOTEND]
description: Run hotend PID calibration test
gcode:
    {% set TARGET = params.TARGET | default(250) | float %}
    PID_CALIBRATE HEATER=extruder TARGET={TARGET} WRITE_FILE=1

[gcode_macro PID_BED]
description: Run heater bed PID calibration test
gcode:
    {% set TARGET = params.TARGET | default(100) | float %}
    PID_CALIBRATE HEATER=heater_bed TARGET={TARGET} WRITE_FILE=1

[menu __main __setup __tuning __hotend_pid_tuning]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name: Tune Hotend PID
gcode: PID_HOTEND

[menu __main __setup __tuning __hotbed_pid_tuning]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name: Tune Heatbed PID
gcode: PID_BED

# Filter
[menu __main __control __filter]
type: list
enable :{ 'fan_generic' in printer}
name: Air filter

[menu __main __control __filter __filteronoff]
type: input
name: Filter: {'ON' if menu.input else 'OFF'}
input: {printer['fan_generic air_filter'].speed}
input_min: 0
input_max: 1
input_step: 1
gcode: {'FILTER_ON' if menu.input else 'FILTER_OFF'}

[menu __main __control __filter __filterspeed]
type: input
name: Speed: {'%3d' % (menu.input*100)}%
input: {printer['fan_generic air_filter'].speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode: SET_FAN_SPEED FAN=air_filter SPEED={'%d' % (menu.input*255)}

[menu __main __control __filter __filtertime]
type: command
name:
    {% set running_hrs = printer.save_variables.variables.air_filter_time / 60.0 / 60.0 %}
    {% set max_hrs = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float %}
    {% set remaining_hrs = max_hrs - running_hrs %}
    {"%d:%02d hours left" % (remaining_hrs, (remaining_hrs * 60 % 60))}    

[menu __main __control __filter __filterreset]
type: command
name: Reset time
gcode: FILTER_RESET

[menu __main __filament]
type: list
name: Filament

[menu __main __filament __load]
type: command
enable: {not printer.print_stats.state == "printing"}
name: Load Filament
gcode: LOAD_FILAMENT

[menu __main __filament __loadf]
type: disabled

[menu __main __filament __loads]
type: disabled

[menu __main __filament __unload]
type: command
enable: {not printer.print_stats.state == "printing"}
name: Unload Filament
gcode: UNLOAD_FILAMENT

[menu __main __filament __unloadf]
type: disabled

[menu __main __filament __unloads]
type: disabled

[menu __main __setup __calib __bed_screws_adjust]
type: list
name: Bed Screws
enable: {('bed_screws' in printer) and (not printer.idle_timeout.state == "Printing")}

[menu __main __setup __calib __bed_screws_adjust __adjust_screws]
type: command
name: Start
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    BED_SCREWS_ADJUST
enable: {not printer.idle_timeout.state == "Printing"}

[menu __main __setup __calib __bed_screws_adjust __screw_adjusted]
type: command
name: ADJUSTED
gcode: ADJUSTED
enable: {not printer.idle_timeout.state == "Printing"}

[menu __main __setup __calib __bed_screws_adjust __screw_accept]
type: command
name: ACCEPT
gcode: ACCEPT
enable: {not printer.idle_timeout.state == "Printing"}

[menu __main __setup __calib __bed_screws_adjust __bed_screws_adjust_abort]
type: command
name: ABORT
gcode: ABORT
enable: {not printer.idle_timeout.state == "Printing"}

[menu __main __temp __chamber_target]
type: input
enable: { 'heater_generic chamber' in printer}
name: {"Cha:%3.0f (%4.0f)" % (menu.input, printer['heater_generic chamber'].temperature)}
input: {printer['heater_generic chamber'].target}
input_min: 0
input_max: {printer.configfile.config['heater_generic chamber'].max_temp}
input_step: 1
gcode: M141 S{'%.0f' % menu.input}
index: 3

[menu __main __setup __tuning __chamber_pid_tuning]
type: command
enable: { 'heater_generic chamber' in printer}
enable: {not printer.idle_timeout.state == "Printing"}
name: Tune Chamber PID
gcode: PID_CHAMBER

[menu __main __temp __cooldown __chamber]
type: command
enable: { 'heater_generic chamber' in printer}
name: Cooldown chamber
gcode: M141 S0

[display_glyph lan]
data:
  ................
  ................
  .*************..
  .*.*.*.*.*.*.*..
  .*.*.*.*.*.*.*..
  .*.*.*.*.*.*.*..
  .*...........*..
  .*...........*..
  .*...........*..
  .*...........*..
  .***.......***..
  ...**.....**....
  ....*******.....
  ................
  ................
  ................

[display_glyph wifi]
data:
  ................
  ................
  ....********....
  ...**......**...
  ..**........**..
  .*...******...*.
  ....**....**....
  ...**......**...
  ..*...****...*..
  .....**..**.....
  ....*......*....
  .......**.......
  .......**.......
  ................
  ................
  ................

[menu __main __setup __network]
type: list
enable: {'network_status' in printer}
name: Network

[menu __main __setup __network _mdns]
type: command
name: mDNS: {printer.network_status.mdns}

[menu __main __setup __network _wifissid]
type: command
name: SSID: {printer.network_status.wifissid}

[menu __main __setup __network _ethip]
type: command
name: ~lan~ {printer.network_status.ethip}

[menu __main __setup __network _wifiip]
type: command
name: ~wifi~ {printer.network_status.wifiip}

[menu __main __filament __motionsensor]
type: input
enable: {'filament_motion_sensor feed' in printer}
name: Motion: {'DISABLED' if not menu.input else 'DETECTED' if printer['filament_motion_sensor feed'].filament_detected else 'EMPTY'}
input: {printer['filament_motion_sensor feed'].enabled}
input_min: 0
input_max: 1
input_step: 1
gcode: SET_FILAMENT_SENSOR SENSOR=feed ENABLE={menu.input}

[menu __main __filament __switchsensor]
type: input
enable: {'filament_switch_sensor filament' in printer}
name: Presence: {'DISABLED' if not menu.input else 'DETECTED' if printer['filament_switch_sensor filament'].filament_detected else 'EMPTY'}
input: {printer['filament_switch_sensor filament'].enabled}
input_min: 0
input_max: 1
input_step: 1
gcode: SET_FILAMENT_SENSOR SENSOR=filament ENABLE={menu.input}
