[menu __main __control __filter]
type: list
enable :{ 'fan_generic' in printer}
name: Air filter

[menu __main __control __filter __filteronoff]
type: input
name: Filter: {'ON' if menu.input else 'OFF'}
input: {printer['fan_generic air_filter'].speed}
input_min: 0
input_max: 1
input_step: 1
gcode: {'FILTER_ON' if menu.input else 'FILTER_OFF'}

[menu __main __control __filter __filterspeed]
type: input
name: Speed: {'%3d' % (menu.input*100)}%
input: {printer['fan_generic air_filter'].speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode: SET_FAN_SPEED FAN=air_filter SPEED={'%d' % (menu.input*255)}

[menu __main __control __filter __filtertime]
type: command
name:
    {% set running_hrs = printer.save_variables.variables.air_filter_time / 60.0 / 60.0 %}
    {% set max_hrs = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float %}
    {% set remaining_hrs = max_hrs - running_hrs %}
    {"%d:%02d hours left" % (remaining_hrs, (remaining_hrs * 60 % 60))}    

[menu __main __control __filter __filterreset]
type: command
name: Reset time
gcode: FILTER_RESET
