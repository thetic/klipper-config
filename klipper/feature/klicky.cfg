[probe]
samples: 3

[gcode_macro _User_Variables]
gcode:
    {% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
    {% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
    {% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
    {% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}

    # If x, y coordinates are set for z endstop, assign them
    {% if z_endstop_x != 0 or z_endstop_y != 0 %}
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }
    # if no x, y coordinates for z endstop, assume probe is endstop and move toolhead to center of bed
    {% else %}
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
    {% endif %}

[respond]

[gcode_macro _Probe_Variables]
variable_probe_attached:            False
variable_probe_state:               False
variable_probe_lock:                False
variable_probe_z_homed:             False
variable_z_endstop_x:               0
variable_z_endstop_y:               0
gcode:

[gcode_macro _exit_point]
gcode:
    {% set function  = 'pre_' ~ params.FUNCTION %}
    {% set move  = params.MOVE|default(0) %}
    {% set speed = printer["gcode_macro _User_Variables"].travel_speed %}

    # mandatory to save the new safe position
    M400
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}


[gcode_macro _entry_point]
gcode:
    {% set function  = 'pre_' ~ params.FUNCTION %}
    {% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}
    # mandatory to save the new safe position
    M400
    SAVE_GCODE_STATE NAME={function}
    # removes the Z offset for better bed based docking
    SET_GCODE_OFFSET Z=0
    # all the macros initially assume absolute positioning
    G90
    # set a safe(sane) Acceleration
    SET_VELOCITY_LIMIT ACCEL={move_accel}

[gcode_macro _Homing_Variables]
gcode:
    {% set reset  = params.RESET|default(0) %}
    {% if reset %}
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
    {% endif %}

##########################
# Attach probe and lock it
[gcode_macro ATTACH_PROBE_LOCK]
description: Attaches Klicky Probe, can only be docked after unlocking
gcode:
    ATTACH_PROBE
    _Probe_Lock

########################
# Dock probe and lock it
[gcode_macro DOCK_PROBE_UNLOCK]
description: Docks Klicky Probe even if it was locked
gcode:
    _Probe_Unlock
    DOCK_PROBE

##############
# Unlock Probe
[gcode_macro _Probe_Unlock]
description: Unlocks Klicky Probe state
gcode:
    SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }

[gcode_macro _Probe_Lock]
description: Locks Klicky Probe state
gcode:
    SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }

[gcode_macro _DeployKlickyDock]
description: Deploys Klicky servo-controlled dock
gcode:
    {% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}
    {% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}
    {% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}
    {% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}

    #wait for all the moves to complete
    M400
    {% if enable_dock_servo != False %}
        {% if servo_deploy == 360 %}
            { action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }
        {% endif %}
        SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}
        M400
        G4 P{servo_delay|int}
        SET_SERVO SERVO={servo_name|string} WIDTH=0
    {% elif printer["gcode_macro _DeployDock"] is defined %}
        _DeployDock
    {% endif %}

[gcode_macro _RetractKlickyDock]
description: Retracts Klicky servo-controlled dock
gcode:
    {% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}
    {% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}
    {% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}
    {% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}

    #wait for all the moves to complete
    M400
    {% if enable_dock_servo != False %}
        {% if servo_retract == 360 %}
            { action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }
        {% endif %}
        SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}
        M400
        G4 P{servo_delay|int}
        SET_SERVO SERVO={servo_name|string} WIDTH=0
    {% elif printer["gcode_macro _RetractDock"] is defined %}
        _RetractDock
    {% endif %}


[gcode_macro ATTACH_PROBE]
description: Attaches Klicky Probe
gcode:
    # See if the position should be restored after the attach
    {% set goback  = params.BACK|default(0) %}
    # Get probe attach status
    {% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
    {% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
    # Get Docking location
    {% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
    {% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
    {% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
    {% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
    {% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
    {% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
    {% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
    {% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
    {% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
    {% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}
    {% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}
    {% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}
    # Safe Z for travel
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
    {% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
    # Set feedrates
    {% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
    {% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
    {% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
    {% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}

    _entry_point function=ATTACH_PROBE

    {% if bypass_probe_docking == False %}

        # If x and y are not homed
        {% if not 'xy' in printer.toolhead.homed_axes %}
            { action_raise_error("Must Home X and Y Axis First!") }

        # If probe not attached and locked
        {% elif not probe_attached and not probe_lock %}
            {% if 'STATUS_BUSY' in printer.gcode.commands %}
                STATUS_BUSY
            {% endif %}

            {% if not 'z' in printer.toolhead.homed_axes %}
                SET_KINEMATIC_POSITION Z=0
                {% if not enable_z_hop %} # Disables safe_z
                    {% set safe_z = 0 %}
                {% endif %}
            {% endif %}

            # Prior to saving actual position, check if its necessary to move to a safe Z
            # that has enought overhead for the attached probe
            {% if printer.gcode_move.gcode_position.z < safe_z %}
                G0 Z{safe_z} F{z_drop_feedrate}
            {% endif %}

            {% if not 'z' in printer.toolhead.homed_axes %} #duplicate??
                SET_KINEMATIC_POSITION Z=0
            {% endif %}

            {% if printer.gcode_move.gcode_position.z < safe_z %} #duplicate??
                G0 Z{safe_z} F{z_drop_feedrate}
            {% endif %}

            _Umbilical_Path

            _entry_point function=Attach_Probe_intern

            # Probe entry location
            G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}
            {% if docklocation_z != -128 %}
                G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}
                G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
            {% endif %}
            # if necessary do some actions before moving the toolhead to dock
            _DeployKlickyDock

            # Drop Probe to Probe location
            {% if docklocation_z != -128 %}
                G0 Z{docklocation_z} F{dock_feedrate}
            {% endif %}
            G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}
            G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
            # Probe Attached
            {% if docklocation_z != -128 %}
                G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}
            {% endif %}
            G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}
            # if necessary do some actions after attaching the probe
            _RetractKlickyDock
            ## Go to Z safe distance
            {% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}
              G0 Z{safe_z} F{z_drop_feedrate}
            {% endif %}

            _Park_Toolhead

            _CheckProbe action=attach

            _exit_point function=Attach_Probe_intern move={goback}
            {% if 'STATUS_READY' in printer.gcode.commands %}
                STATUS_READY
            {% endif %}
        {% else %}
            # Probe attached, do nothing
            _CheckProbe action=query
        {% endif %}

        _exit_point function=ATTACH_PROBE
    {% endif %}


[gcode_macro DOCK_PROBE]
description: Docks Klicky Probe
gcode:
    # See if the position should be restored after the dock
    {% set goback  = params.BACK|default(0) %}
    # Get probe attach status
    {% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
    {% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
    # Get Docking location
    {% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
    {% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
    {% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
    {% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
    {% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
    {% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
    {% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
    {% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
    {% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
    # Safe Z for travel
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
    # Set feedrates
    {% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
    {% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
    {% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
    {% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}

    {% if bypass_probe_docking != True %}
        _entry_point function=DOCK_PROBE

        # If probe not attached and not locked
        {% if probe_attached and not probe_lock %}
            {% if 'STATUS_BUSY' in printer.gcode.commands %}
                STATUS_BUSY
            {% endif %}
            {% if printer.gcode_move.gcode_position.z < safe_z %}
                G0 Z{safe_z} F{z_drop_feedrate}
            {% endif %}
            _Umbilical_Path

            # Probe entry location
            G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}

            {% if docklocation_z != -128 %}
                G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}
            {% endif %}

            # if necessary do some actions before moving the toolhead to dock
            _DeployKlickyDock

            # Drop Probe to Probe location

            G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}
            {% if docklocation_z != -128 %}
                G0 Z{docklocation_z} F{dock_feedrate}
            {% endif %}

            # Probe decoupling
            {% if docklocation_z != -128 %}
                G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}
            {% endif %}

            G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}

            # if necessary do some actions after attaching the probe
            _RetractKlickyDock

            #Do an extra move away
            G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}

            ## Go to Z safe distance
            {% if (printer.gcode_move.gcode_position.z < safe_z) %}
                G0 Z{safe_z} F{z_drop_feedrate}
            {% endif %}

            _Park_Toolhead

            G4 P1000
            _CheckProbe action=dock
            {% if 'STATUS_READY' in printer.gcode.commands %}
                STATUS_READY
            {% endif %}
        {% else %}
            # Probe docked, do nothing
            _CheckProbe action=query
        {% endif %}

        _exit_point function=DOCK_PROBE move={goback}
    {% endif %}


#################
# Probe Calibrate
[gcode_macro PROBE_CALIBRATE]
rename_existing: _PROBE_CALIBRATE
description:Calibrate the probes z_offset with klicky automount
gcode:
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
    {% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}
    {% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}
    {% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
    {% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}


    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}

    # Protect against PROBE CALIBRATE performed from outside the bed
    {% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
          or printer['gcode_move'].position.y < - probe_offset_y
          or printer['gcode_move'].position.x > (max_x - probe_offset_x)
          or printer['gcode_move'].position.x < - probe_offset_x %}
        { action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }
    {% endif %}

    {% if bypass_probe_docking == False %}
        _CheckProbe action=query
        G90
        ATTACH_PROBE back=1
    {% endif %}

    {% if 'STATUS_CALIBRATING_Z' in printer.gcode.commands %}
        STATUS_CALIBRATING_Z
    {% endif %}
    _PROBE_CALIBRATE {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
            endfor %}

    {% if bypass_probe_docking == False %}
        M118 moving the toolhead 20 mm from the bed
        TESTZ Z=20
        M118 remove manually the probe and continue calibration
    {% endif %}

    {% if 'STATUS_READY' in printer.gcode.commands %}
        STATUS_READY
    {% endif %}

################
# Probe Accuracy
[gcode_macro PROBE_ACCURACY]
rename_existing: _PROBE_ACCURACY
description:Probe Z-height accuracy at current XY position with klicky automount
gcode:
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
    {% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}
    {% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}
    {% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}

    _entry_point function=PROBE_ACCURACY

    # Protect against PROBE_ACCURACY performed from outside the bed
    {% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
          or printer['gcode_move'].position.y < - probe_offset_y
          or printer['gcode_move'].position.x > (max_x - probe_offset_x)
          or printer['gcode_move'].position.x < - probe_offset_x %}
        { action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }
    {% endif%}

    _CheckProbe action=query
    ATTACH_PROBE back=1

    _PROBE_ACCURACY {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

    DOCK_PROBE back=1

    _exit_point function=PROBE_ACCURACY move=1

[force_move]
enable_force_move: True

[homing_override]
axes: xyz
gcode:
    # collect user state variables
    _User_Variables
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
    # Safe Z for travel
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
    {% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
    {% set kinematic_z = 0 %}
    {% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}
    {% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
    {% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
    {% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
    {% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
    {% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}
    {% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}
    {% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default('') %}

    _CheckProbe action=query

    # reset parameters
    {% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}

    {% if 'PROBE_LOCK' in params%}
        {% set leave_probe_attached = True %}
    {% endif %}

    # which axes have been requested for homing
    {% if not 'X' in params and not 'Y' in params and not 'Z' in params %}
        {% set home_x, home_y, home_z = True, True, True %}
    {% else %}
        {% if 'X' in params %}
            {% set home_x = True %}
        {% endif %}

        {% if 'Y' in params %}
            {% set home_y = True %}
        {% endif %}

        {% if 'Z' in params %}
            {% set home_z = True %}
        {% endif %}

        {% if 'X' in params and 'Y' in params and 'Z' in params %}
            # reset homing state variables
            # if homing all axes
            _Homing_Variables reset=1
         {% endif %}
    {% endif %}

    _entry_point function=homing_override
    {% if 'STATUS_HOMING' in printer.gcode.commands %}
        STATUS_HOMING
    {% endif %}

    # if Z is not homed, do not move the bed if it goes down
    {% if 'z' not in printer.toolhead.homed_axes %}
        {% if enable_z_hop == False %} # Disables safe_z
            #preserve safe_z to use as the SET KINEMATIC Z position, so that the toolhead does not move to pick up the probe
            {% set kinematic_z = safe_z %}
            {% set safe_z = safe_z %}
        {% endif %}
    {% endif %}

    #On the first G28 after motors losing power, moves the Z to safe_z distance, if z_hop is enabled
    {% if 'x' not in printer.toolhead.homed_axes and 'y' not in printer.toolhead.homed_axes and 'z' not in printer.toolhead.homed_axes%}
        SET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}
        M400
        G0 Z{safe_z} F{z_drop_feedrate}
        {% if home_z != True %} 
            M84
        {% endif %}
    {% endif %}

    {% if home_z %}
        {% if 'x' not in printer.toolhead.homed_axes and 'y' not in printer.toolhead.homed_axes%}
            {% set home_x, home_y, home_z = True, True, True %}
        {% endif %}
    {% endif %}

    # if the dock is oriented on the Y, first do Y endstop
    {% if ((attachmove_y == 0 and override_homing == '' ) or (override_homing == 'Y'))%}
        # Home y
        {% if home_y %}
            {% if 'z' in printer.toolhead.homed_axes %}
                G0 Z{safe_z} F{z_drop_feedrate}
            {% endif %}
            {% if '_HOME_Y' in printer.gcode.commands %}
                _HOME_Y
            {% else %}
                G28 Y0
                # does it need to back away from the home position
                {% if home_backoff_y != 0 %}
                    {% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}
                        G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}
                    {% else %}
                        G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}
                    {%endif %}
                {%endif %}
            {% endif %}
        {% endif %}
        {% set home_y = False %}
    {% endif %}

    # Home x
    {% if home_x %}
        {% if 'z' in printer.toolhead.homed_axes %}
            G0 Z{safe_z} F{z_drop_feedrate}
        {% endif %}

        {% if '_HOME_X' in printer.gcode.commands %}
            _HOME_X
        {% else %}
            G28 X0
            # does it need to back away from the home position
            {% if home_backoff_x != 0 %}
                {% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}
                    G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}
                {% else %}
                    G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}
                {%endif %}
            {%endif %}
        {% endif %}
    {% endif %}

    # Home y
    {% if home_y %}
        {% if 'z' in printer.toolhead.homed_axes %}
            G0 Z{safe_z} F{z_drop_feedrate}
        {% endif %}

        {% if '_HOME_Y' in printer.gcode.commands %}
            _HOME_Y
        {% else %}
            G28 Y0
            {% if home_backoff_y != 0 %}
                {% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}
                    G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}
                {% else %}
                    G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}
                {%endif %}
            {%endif %}
        {% endif %}
    {% endif %}
    # Home z
    {% if home_z %}
        {% if 'z' in printer.toolhead.homed_axes %}
            G0 Z{safe_z} F{z_drop_feedrate}
        {% endif %}

        # if probe is configured as endstop, attach it, else check if the probe needs to be docked if attached
        {% if 'z_virtual_endstop' in printer['configfile'].config["stepper_z"]["endstop_pin"] %}
            ATTACH_PROBE
            # if PROBE_LOCK parameter is given, Attach Probe and lock until it´s unlocked
            {% if leave_probe_attached %}
                _Probe_Lock
            {% endif %}
        {% elif dock_on_zhome == True %}
            DOCK_PROBE
        {% endif %}

        _HOME_Z

        # if probe is configured as endstop, dock it
        {% if
            'z_virtual_endstop' in printer['configfile'].config["stepper_z"]["endstop_pin"]
            or (dock_on_zhome == False)
        %}
            DOCK_PROBE
        {% endif %}
    {% endif %}
    _CheckProbe action=query

    # park the toolhead
    _Park_Toolhead

    _exit_point function=homing_override
    {% if 'STATUS_READY' in printer.gcode.commands %}
        STATUS_READY
    {% endif %}

# Umbilical path setup
[gcode_macro _Umbilical_Path]
gcode:
    {% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}
    {% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}
    {% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
    {% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}

    {% if umbilical %}
        # Used to give the umbilical a better path to follow and coil properly if dock is tight in space
        _entry_point function=Umbilical_Path
        G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}
        _exit_point function=Umbilical_Path
    {% endif %}


# Home Z Routine
[gcode_macro _HOME_Z]
gcode:
    {% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}
    {% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
    {% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}

    _entry_point function=Home_Z

    # if x and y are not homed yet, raise error
    {% if not 'xy' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X and Y Axis First!") }
    {% else %}
        {% if not 'z' in printer.toolhead.homed_axes %}
            SET_KINEMATIC_POSITION Z=0
        {% endif %}

        # Move tool to safe homing position and home Z axis
        # location of z endstop
        G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}
        G28 Z0
        G0 Z{safe_z} F{z_drop_feedrate}
    {% endif %}

    _exit_point function=Home_Z

# Check to see if probe is where it is supposed to be after
# attaching/docking maneuver and set homing error or shutdown
[gcode_macro _CheckProbe]
variable_probe_state: 0
gcode:
    Query_Probe
    _SetProbeState action={ params.ACTION }

# Due to how templates are evaluated, we have query endstops in one
# macro and call another macro to make decisions based on the result
[gcode_macro _SetProbeState]
gcode:
    {% set query_probe_triggered = printer.probe.last_query %}
    {% set action  = params.ACTION|default('') %}

    # If triggered (true), probe not attached
    {% if query_probe_triggered %}
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }
    {% else %}
        # If not triggered (false), probe attached
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }
    {% endif %}

    {% if action == 'query' %}
          SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }
    {% endif %}

    # If not docked
    {% if not query_probe_triggered and action == 'dock' %}
        { action_raise_error("Probe dock failed!") }
    {% endif %}

    # If not attached
    {% if query_probe_triggered and action == 'attach' %}
        { action_raise_error("Probe attach failed!") }
    {% endif %}

# Park Toolhead Routine
[gcode_macro _Park_Toolhead]
gcode:
    {% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}
    {% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}
    {% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}
    {% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}
    {% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}

    _entry_point function=Park_Toolhead

    {% if park_toolhead and 'xyz' in printer.toolhead.homed_axes %}
        {% if parkposition_z == -128 %}
            G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}
        {% else %}
            G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}
        {% endif %}
    {% endif %}
    _exit_point function=Park_Toolhead
