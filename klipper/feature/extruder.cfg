[extruder]
max_extrude_cross_section: 5

[firmware_retraction]

[exclude_object]


[gcode_macro M106]
description: Set fan speed
rename_existing: M99106
gcode:
    {% set S = params.S | default(255) | int %}
    {% set P = params.P | default(1) | int %}

    {% if P == 1 %}
        M99106 S{S}
    {% elif (P == 2) and ('fan_generic auxiliary' in printer) %}
        SET_FAN_SPEED FAN=auxiliary SPEED={S|float / 255}
    {% elif (P == 3) and ('fan_generic air_filter' in printer) %}
        SET_FAN_SPEED FAN=air_filter SPEED={S|float / 255}
    {% else %}
        { action_raise_error('Unknown fan') }
    {% endif %}


[gcode_macro M107]
description: Turn fan off
rename_existing: M99107
gcode:
    {% set P = params.P | default(1) | int %}

    {% if P == 1 %}
        M99107
    {% elif (P == 2) and ('fan_generic auxiliary' in printer) %}
        SET_FAN_SPEED FAN=auxiliary SPEED=0
    {% elif (P == 3) and ('fan_generic air_filter' in printer) %}
        SET_FAN_SPEED FAN=air_filter SPEED=0
    {% else %}
        { action_raise_error('Unknown fan') }
    {% endif %}

[gcode_macro M109]
description: Wait for Hotend Temperature
rename_existing: M99109
gcode:
    {% set s = params.S | default(0) | float %}

    # Set status
    {% if s < printer.extruder.temperature %}
        {% if 'STATUS_COOLING_NOZZLE' in printer.gcode.commands %}
            STATUS_COOLING_NOZZLE
        {% endif %}
    {% else %}
        {% if 'STATUS_HEATING_NOZZLE' in printer.gcode.commands %}
            STATUS_HEATING_NOZZLE
        {% endif %}
    {% endif %}

    {% set algo = printer.configfile.settings.extruder.control %}
    {% if algo == 'mpc' %}
        # Set hotend temp
        M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
        {% if s != 0 %}
            # Wait for hotend temp (within n degrees)
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-2} MAXIMUM={s+5}
        {% endif %}
    {% else %}
        # Normal M109
        M99109 S{s}
    {% endif %}

    # Set status
    {% if 'STATUS_READY' in printer.gcode.commands %}
        STATUS_READY
    {% endif %}

[gcode_macro PARK]
description: Park the toolhead while it heats
gcode:
    {% set purge_type = printer["gcode_macro PURGE"].purge_type %}
    {% if purge_type == "pellet" %}
        {% set purge_x = printer["gcode_macro PURGE"].purge_x %}
        {% set purge_y = printer["gcode_macro PURGE"].purge_y %}
        {% set purge_height = printer["gcode_macro PURGE"].purge_height %}
        G0 X{purge_x} Y{purge_y} Z9
    {% else %}
        SMART_PARK
    {% endif %}


[gcode_macro SMART_PARK]
description: Parks your toolhead near the print area for pre-print hotend heating.
variable_z_height: 10
variable_purge_margin: 10
gcode:
    # Create center point of x for fallback
    {% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}

    # Create center point of y for fallback
    {% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
    {% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
    {% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}

    # Gather all object points
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
    {% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}

    # If objects are detected and purge margin
    {% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
        # value is greater than 0, move to purge location + margin
        {% set x_min = [ x_min - purge_margin , x_min ] | min %}
        {% set y_min = [ y_min - purge_margin , y_min ] | min %}
        {% set x_min = [ x_min , axis_minimum_x ] | max %}
        {% set y_min = [ y_min , axis_minimum_y ] | max %}
    {% endif %}

    {% if printer.toolhead.position.z < z_height %}
        # Move Z to park height if current Z position is lower than z_height
        G0 Z{z_height}
    {% endif %}

    # Move near object area
    G0 X{x_min} Y{y_min} F{travel_speed}
    G0 Z{z_height}


[gcode_macro PURGE]
variable_purge_height: 0.8                  # Z position of nozzle during purge, default is 0.8.
variable_purge_amount: 30                   # Amount of filament to be purged prior to printing.
variable_flow_rate: 12                      # Flow rate of purge in mm3/s. Default is 12.
variable_purge_type: "line"
# Line purge parameters
variable_purge_margin: 10                   # Distance the purge will be in front of the print area, default is 10.
# Pellet purge parameters
variable_kick_height: 0.2                   # Z position of nozzle while knocking off the pellet, default is 0.2
variable_purge_x: 5                         # X coordinate to purge at
variable_purge_y: 5                         # Y coordinate to purge at
variable_bucket_direction: "left"           # Direction to knock the pellet
gcode:
    SAVE_GCODE_STATE NAME=Prepurge_State

    {% if 'STATUS_CLEANING' in printer.gcode.commands %}
        STATUS_CLEANING
    {% endif %}

    {% if purge_type == "line" %}
        _PURGE_LINE
    {% elif purge_type == "pellet" %}
        _PURGE_PELLET
    {% else %}
        { action_raise_error('Invalid purge type') }
    {% endif %}

    {% if 'STATUS_READY' in printer.gcode.commands %}
        STATUS_READY
    {% endif %}

    RESTORE_GCODE_STATE NAME=Prepurge_State


[gcode_macro _PURGE_LINE]
gcode:
    {% set purge_height = printer["gcode_macro PURGE"].purge_height %}
    {% set purge_amount = printer["gcode_macro PURGE"].purge_amount %}
    {% set flow_rate = printer["gcode_macro PURGE"].flow_rate %}
    {% set purge_margin = printer["gcode_macro PURGE"].purge_margin %}

    # Get relevant printer params
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
    {% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}

    # Calculate purge origins and centers from objects
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
    {% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
    {% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
    {% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}

    {% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
    {% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}

    {% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
    {% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}

    {% if tip_distance is not defined %}
        {% set tip_distance = printer['gcode_macro PRINT_END'].retract_distance|default(0) %}
    {% endif %}

    # Calculate purge speed
    {% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}

    # If there's room on Y, purge along X axis in front of print area
    {% if purge_y_origin > 0 %}

        G92 E0
        G0 F{travel_speed}
        G90
        G0 X{purge_x_center} Y{purge_y_origin}
        G0 Z{purge_height}
        M83
        G1 E{tip_distance} F{purge_move_speed}
        G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
        G10
        G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
        G92 E0
        M82
        G0 Z{purge_height * 2} F{travel_speed}

    # If there's room on X, purge along Y axis to the left of print area
    {% else %}

        G92 E0
        G0 F{travel_speed}
        G90
        G0 X{purge_x_origin} Y{purge_y_center}
        G0 Z{purge_height}
        M83
        G1 E{tip_distance} F{purge_move_speed}
        G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
        G10
        G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
        G92 E0
        M82
        G0 Z{purge_height * 2} F{travel_speed}

    {% endif %}


[gcode_macro _PURGE_PELLET]
gcode:
    {% set purge_height = printer["gcode_macro PURGE"].purge_height %}
    {% set purge_amount = printer["gcode_macro PURGE"].purge_amount %}
    {% set kick_height = printer["gcode_macro PURGE"].kick_height %}
    {% set flow_rate = printer["gcode_macro PURGE"].flow_rate %}

    {% set purge_x = printer["gcode_macro PURGE"].purge_x %}
    {% set purge_y = printer["gcode_macro PURGE"].purge_y %}
    {% set bucket_direction = printer["gcode_macro PURGE"].bucket_direction %}

    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
    {% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}

    {% if tip_distance is not defined %}
        {% set tip_distance = printer['gcode_macro PRINT_END'].retract_distance|default(0) %}
    {% endif %}

    G90
    G11
    G1 E{tip_distance} F{purge_move_speed}
    G0 Z20 F{travel_speed} ; Move nozzle away from bed

    {% set purge_peak = 9 %} # TODO

    G0 X{purge_x} Y{purge_y} Z{purge_height} F{travel_speed} ; Move to start position

    M106 S255

    # Purge pellet
    G1 X{purge_x} Y{purge_y} Z{purge_peak} E{purge_amount} F{purge_move_speed}
    G10

    # Let it cool
    G4 P7500
    M107

    # "Wind up" to kick the pellet into the bucket.
    {% if bucket_direction == "right" %}
        G0 X{purge_x - 40} Y{purge_y} Z{purge_peak} F{travel_speed}
    {% elif bucket_direction == "left" %}
        G0 X{purge_x + 40} Y{purge_y} Z{purge_peak} F{travel_speed}
    {% elif bucket_direction == "front" %}
        G0 X{purge_x} Y{purge_y + 40} Z{purge_peak} F{travel_speed}
    {% elif bucket_direction == "rear" %}
        G0 X{purge_x} Y{purge_y - 40} Z{purge_peak} F{travel_speed}
    {% else %}
        { action_raise_error('Invalid bucket_direction') }
    {% endif %}

    # Kick the pellet into the bucket
    G0 Z{kick_height}
    G0 X{purge_x} Y{purge_y} Z{purge_height + 0.1} F3600

    # Pick up the nozzle
    G0 Z{purge_peak} F{travel_speed}


[gcode_macro CALIBRATE_HOTEND]
description: Run hotend calibration
gcode:
    {%
        set TARGET =
        params.TARGET if 'TARGET' in params
        else printer["gcode_macro PRINT_START"].default_nozzle_temp
        | float
    %}
    M117 Calibrating hotend for {TARGET}C

    {% set algo = printer.configfile.settings.extruder.control %}
    {% if algo == 'mpc' %}
        MPC_CALIBRATE HEATER=extruder TARGET={TARGET} {rawparams}
    {% elif algo == 'pid' %}
        PID_CALIBRATE HEATER=extruder TARGET={TARGET} {rawparams}
    {% else %}
        {action_raise_error("Cannot tune algorithm: " + algo)}
    {% endif %}


[gcode_macro M600]
description: Filament change pause
gcode:
    PAUSE
    {% if 'UNLOAD_FILAMENT' in printer.gcode.commands %}
        UNLOAD_FILAMENT
    {% endif %}
