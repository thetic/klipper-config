[gcode_macro PRINT_START]
gcode:
    {% set BED_TEMP = params.BED | default(60) | float %}
    {% set NOZZLE_TEMP = params.NOZZLE | default(190) | float %}
    {% set CHAMBER_TEMP = params.CHAMBER | default(0) | float %}
    {% set CHAMBER_WAIT = params.CHAMBER_WAIT | default([CHAMBER_TEMP, 40] | min) | float %}
    {% set FILAMENT_TYPE = params.FILAMENT_TYPE | default("ABS") %}
    {% set LAYER_COUNT = params.LAYER_COUNT | default(0) | int %}
    {% if 'firmware_retraction' in printer %}
        {% set RETRACT_LENGTH = params.RETRACT_LENGTH | default (printer.configfile.settings.firmware_retraction.retract_length) | float %}
        {% set RETRACT_SPEED = params.RETRACT_SPEED | default(printer.configfile.settings.firmware_retraction.retract_speed) | float %}
        {% set UNRETRACT_SPEED = params.UNRETRACT_SPEED | default(printer.configfile.settings.firmware_retraction.unretract_speed) | float %}
        {% set UNRETRACT_EXTRA_LENGTH = params.UNRETRACT_EXTRA_LENGTH | default(printer.configfile.settings.firmware_retraction.unretract_extra_length) | float %}

        SET_RETRACTION RETRACT_LENGTH={RETRACT_LENGTH} RETRACT_SPEED={RETRACT_SPEED} UNRETRACT_SPEED={UNRETRACT_SPEED} UNRETRACT_EXTRA_LENGTH={UNRETRACT_EXTRA_LENGTH}
    {% endif %}

    {% if LAYER_COUNT > 0 %}
        SET_PRINT_STATS_INFO TOTAL_LAYER={LAYER_COUNT}
    {% endif %}

    # Start heating the bed
    M140 S{BED_TEMP}

    {% if "xyz" not in printer.toolhead.homed_axes %}  
        M117 Homing
        G28
    {% endif %}
    G90

    M117 Heating bed
    M190 S{BED_TEMP}

    {% if 'FILTER_ON' in printer.gcode.commands %}
        {% if FILAMENT_TYPE in ["ABS", "ASA", "PC"] %}
          FILTER_ON
        {% else %}
          FILTER_OFF
        {% endif %}
    {% endif %}

    {% if CHAMBER_TEMP > 0 %}
        {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
        {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
        G1 X{x_wait} Y{y_wait} Z15 F9000

        M117 Heating chamber
        SET_HEATER_TEMPERATURE HEATER=chamber TARGET={CHAMBER_TEMP}
        TEMPERATURE_WAIT SENSOR="heater_generic chamber" MINIMUM={CHAMBER_WAIT}
        # Make sure the bed heater has recovered.
        M190 S{BED_TEMP}
    {% endif %}

    M104 S{NOZZLE_TEMP}

    {% if 'Attach_Probe_Lock' in printer.gcode.commands %}
        Attach_Probe_Lock ; Keep the probe on for the following probes
    {% endif %}

    {% if 'CALIBRATE_Z' in printer.gcode.commands %}
        M117 Heating nozzle
        M109 S{NOZZLE_TEMP}

        M117 Calibrating Z
        CALIBRATE_Z
    {% endif %}

    {% if 'quad_gantry_level' in printer %}
        M117 Tramming
        QUAD_GANTRY_LEVEL
        G28
    {% endif %}

    {% if 'z_tilt' in printer %}
        M117 Tramming
        Z_TILT_ADJUST
        G28
    {% endif %}

    {% if 'bed_mesh' in printer %}
        M117 Meshing
        BED_MESH_CALIBRATE ADAPTIVE=1
    {% endif %}

    {% if 'Dock_Probe_Unlock' %}
        Dock_Probe_Unlock
    {% endif %}

    SMART_PARK

    M117 Heating nozzle
    M109 S{NOZZLE_TEMP}

    M117 Priming
    LINE_PURGE

    {% if 'FILAMENT_SENSOR_ENABLE' in printer.gcode.commands %}
        FILAMENT_SENSOR_ENABLE
    {% endif %}

    M117
    {% if 'STATUS_PRINTING' in printer.gcode.commands %}
        STATUS_PRINTING
    {% endif %}


[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    {% set x_park = th.axis_maximum.x - 2 %}
    {% set y_park = th.axis_maximum.y - 2 %}
    {% set z_park = z_safe %}
    {% set retract_distance = 5.0 %}

    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear

    G92 E0                         ; zero the extruder
    G1 E-{retract_distance} F1800  ; retract filament

    TURN_OFF_HEATERS

    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{x_park} Y{y_park} F3600  ; park nozzle at rear
    M107                                     ; turn off fan

    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

    {% if 'FILAMENT_SENSOR_DISABLE' in printer.gcode.commands %}
        FILAMENT_SENSOR_DISABLE
    {% endif %}
    M400

    {% if 'M300' in printer.gcode.commands %}
        M300
    {% endif %}

    {% if 'STATUS_PART_READY' in printer.gcode.commands %}
        STATUS_PART_READY
    {% endif %}


[gcode_macro LAYER_START]
gcode:
    {% set CURRENT_LAYER = params.CURRENT_LAYER | default(0) | int %}
    {% if CURRENT_LAYER > 0 %}
        SET_PRINT_STATS_INFO CURRENT_LAYER={CURRENT_LAYER}
        M117 Layer {CURRENT_LAYER}/{printer.print_stats.info.total_layer}
    {% endif %}

[gcode_macro LAYER_END]
gcode:
    {% if 'TIMELAPSE_TAKE_FRAME' in printer.gcode.commands %}
        TIMELAPSE_TAKE_FRAME
    {% endif %}


[respond]

[gcode_macro M117]
rename_existing: M99117
gcode:
    {% if rawparams %}
        # trim comments after a `;` or `#` and escape any existing `"`
        {% set escaped_msg = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
        SET_DISPLAY_TEXT MSG="{escaped_msg}"
        RESPOND TYPE=command MSG="{escaped_msg}"
    {% else %}
        SET_DISPLAY_TEXT
    {% endif %}


[gcode_macro DUMP_WARNINGS]
description: Debug: Print all warning messages from klipper
gcode:
    {% set parameters = ["printer.configfile.warnings:"] %}
    {% for warning in printer.configfile.warnings %}
        {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}
    {% endfor %}
    {action_respond_info(parameters|join("\n"))}

[gcode_macro DUMP_PARAMS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s" (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}
