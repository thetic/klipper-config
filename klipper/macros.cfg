[gcode_macro __TRY_MACRO]
gcode:
    {% if params.NAME in printer.gcode.commands %}
        {params.NAME}
    {% endif %}

[gcode_macro _SET_MPC_MATERIAL]
description: Set heater MPC parameters for a given material
variable_filament_table:
    ## Update this table to adjust material settings
    {
        ## ( density, heat capacity )  # suggested heat capacity range
        "PLA"       : ( 1.25, 2.20 ),  # 1.80 - 2.20
        "PETG"      : ( 1.27, 2.20 ),  # 1.70 - 2.20
        "PC+ABS"    : ( 1.15, 2.20 ),  # 1.50 - 2.20
        "ABS"       : ( 1.06, 2.40 ),  # 1.25 - 2.40
        "ASA"       : ( 1.07, 2.10 ),  # 1.30 - 2.10
        "PA6"       : ( 1.12, 2.50 ),  # 2.00 - 2.50
        "PA"        : ( 1.15, 2.50 ),  # 2.00 - 2.50
        "PC"        : ( 1.20, 1.90 ),  # 1.10 - 1.90
        "TPU"       : ( 1.21, 2.00 ),  # 1.50 - 2.00
        "TPU-90A"   : ( 1.15, 2.00 ),  # 1.50 - 2.00
        "TPU-95A"   : ( 1.22, 2.00 ),  # 1.50 - 2.00
        "ABS-CF"    : ( 1.11, 2.40 ),  # 1.25 - 2.40
        "ASA-CF"    : ( 1.11, 2.10 ),  # 1.30 - 2.10
        "PA6-CF"    : ( 1.19, 2.50 ),  # 2.00 - 2.50
        "PC+ABS-CF" : ( 1.22, 2.20 ),  # 1.50 - 2.20
        "PC+CF"     : ( 1.36, 1.90 ),  # 1.10 - 1.90
        "PLA-CF"    : ( 1.29, 2.20 ),  # 1.80 - 2.20
        "PETG-CF"   : ( 1.30, 2.20 ),  # 1.70 - 2.20
    }
gcode:
    {% set material = params.MATERIAL | upper %}
    {% set heater = params.HEATER | default('extruder') %}

    {% if material in filament_table %}
        {% set (density, heat_capacity) = filament_table[material] %}
        RESPOND MSG="Configured {heater} MPC for {material}. Density: {density}, Heat Capacity: {heat_capacity}"
    {% else %}
        {% set extruder_config = printer.configfile.settings[heater] %}
        {% set density = extruder_config.filament_density %}
        {% set heat_capacity=extruder_config.filament_heat_capacity %}

        RESPOND MSG="Unknown material '{material}', using default mpc parameters for {heater}"
    {% endif %}

    MPC_SET HEATER={heater} FILAMENT_DENSITY={density} FILAMENT_HEAT_CAPACITY={heat_capacity}

[gcode_macro PRINT_START]
variable_default_bed_temp: 60
variable_default_nozzle_temp: 190
variable_default_chamber_temp: 0
variable_default_chamber_wait: 40
variable_default_filament_type: "ABS"
gcode:
    {% set BED_TEMP = params.BED | default(default_bed_temp) | float %}
    {% set NOZZLE_TEMP = params.NOZZLE | default(default_nozzle_temp) | float %}
    {% set CHAMBER_TEMP = params.CHAMBER | default(default_chamber_temp) | float %}
    {% set CHAMBER_WAIT = params.CHAMBER_WAIT | default([CHAMBER_TEMP, default_chamber_wait] | min) | float %}
    {% set FILAMENT_TYPE = params.FILAMENT_TYPE | default(default_filament_type) | string %}
    {% set LAYER_COUNT = params.LAYER_COUNT | default(0) | int %}
    {% if LAYER_COUNT > 0 %}
        SET_PRINT_STATS_INFO TOTAL_LAYER={LAYER_COUNT}
    {% endif %}

    # Start heating the bed
    M140 S{BED_TEMP}

    # Set vent
    {% if CHAMBER_TEMP > 0 %}
        __TRY_MACRO NAME=VENT_CLOSE
    {% else %}
        __TRY_MACRO NAME=VENT_OPEN
    {% endif %}

    # Start heating chamber
    {% if 'M141' in printer.gcode.commands %}
        M141 S{CHAMBER_TEMP}
    {% endif %}

    {% set already_homed = ("xyz" in printer.toolhead.homed_axes) %}
    {% set uses_dock = ('ATTACH_PROBE_LOCK' in printer.gcode.commands) %}
    {% if uses_dock or not already_homed %}
        M117 Homing
        G28
    {% endif %}

    G90

    # Park in the center
    {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
    G1 X{x_wait} Y{y_wait} Z15 F9000

    M117 Heating bed to {BED_TEMP}C
    M190 S{BED_TEMP}

    {% if printer.configfile.settings.extruder.control == 'mpc' %}
        _SET_MPC_MATERIAL MATERIAL={FILAMENT_TYPE}
    {% endif %}

    # Warm the nozzle up for extra heat
    M104 S{ [NOZZLE_TEMP, 150] | min }

    {% if CHAMBER_TEMP > 0 %}
        M117 Heating chamber to {CHAMBER_WAIT}C

        {% if 'temperature_fan chamber' in printer %}
            TEMPERATURE_WAIT SENSOR="temperature_fan chamber" MINIMUM={CHAMBER_WAIT}
        {% elif 'heater_generic chamber' in printer %}
            TEMPERATURE_WAIT SENSOR="heater_generic chamber" MINIMUM={CHAMBER_WAIT}
        {% endif %}
    {% endif %}

    {% if FILAMENT_TYPE in ["ABS", "ASA", "PC"] %}
        __TRY_MACRO NAME=FILTER_ON
    {% else %}
        __TRY_MACRO NAME=FILTER_OFF
    {% endif %}

    {% if 'ATTACH_PROBE_LOCK' in printer.gcode.commands %}
        # Keep the probe on for the following probes
        M117 Attaching probe
        ATTACH_PROBE_LOCK
    {% endif %}

    {% if 'quad_gantry_level' in printer and not printer.quad_gantry_level.applied %}
        M117 Tramming
        QUAD_GANTRY_LEVEL
        G28
    {% endif %}

    {% if 'z_tilt' in printer and not printer.z_tilt.applied %}
        M117 Tramming
        Z_TILT_ADJUST
        G28
    {% endif %}

    {% if 'CALIBRATE_Z' in printer.gcode.commands %}
        SMART_PARK

        M117 Heating nozzle to {NOZZLE_TEMP}C
        M109 S{NOZZLE_TEMP}

        M117 Calibrating Z
        CALIBRATE_Z
    {% endif %}

    {% if 'bed_mesh' in printer %}
        M117 Meshing
        BED_MESH_CALIBRATE ADAPTIVE=1
    {% endif %}

    {% if 'scanner' in printer %}
        M117 Calibrating Z
        CARTOGRAPHER_TOUCH
    {% endif %}

    {% if 'DOCK_PROBE_UNLOCK' in printer.gcode.commands %}
        M117 Docking probe
        DOCK_PROBE_UNLOCK
    {% endif %}

    PARK

    M117 Heating nozzle to {NOZZLE_TEMP}C
    M109 S{NOZZLE_TEMP}

    M117 Priming
    PURGE

    {% if 'STATUS_PRINTING' in printer.gcode.commands %}
        STATUS_PRINTING
    {% endif %}

    {% if 'FEED_SENSOR_ENABLE' in printer.gcode.commands %}
        FEED_SENSOR_ENABLE
    {% endif %}

    M117


[gcode_macro PRINT_END]
variable_retract_distance: 5.0
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    {% set x_park = th.axis_maximum.x - 5 %}
    {% set y_park = th.axis_maximum.y - 5 %}
    {% set z_park = z_safe %}

    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear

    G92 E0                         ; zero the extruder
    G1 E-{retract_distance} F1800  ; retract filament

    TURN_OFF_HEATERS

    G90                                     ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000 ; move nozzle to remove stringing
    G0 X{x_park} Y{y_park} F3600            ; park nozzle at rear

    M107                                    ; turn off fan
    {% if 'fan_generic auxiliary' in printer %}
        SET_FAN_SPEED FAN=auxiliary SPEED=0
    {% endif %}

    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

    {% if 'FEED_SENSOR_DISABLE' in printer.gcode.commands %}
        FEED_SENSOR_DISABLE
    {% endif %}
    M400

    {% if 'M300' in printer.gcode.commands %}
        M300
    {% endif %}

    {% if 'STATUS_PART_READY' in printer.gcode.commands %}
        STATUS_PART_READY
    {% endif %}


[gcode_macro LAYER_START]
gcode:
    # Many slicers zero index
    {% if params.CURRENT_LAYER is defined %}
        {% set CURRENT_LAYER = params.CURRENT_LAYER|int %}
    {% elif params.LAST_LAYER is defined %}
        {% set CURRENT_LAYER = params.LAST_LAYER|int + 1 %}
    {% endif %}
    {% if CURRENT_LAYER is defined %}
        SET_PRINT_STATS_INFO CURRENT_LAYER={CURRENT_LAYER}
        SET_DISPLAY_TEXT MSG="Layer {CURRENT_LAYER}/{printer.print_stats.info.total_layer}"
    {% endif %}

[gcode_macro LAYER_END]
gcode:
    {% if 'TIMELAPSE_TAKE_FRAME' in printer.gcode.commands %}
        TIMELAPSE_TAKE_FRAME
    {% endif %}

# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
    {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
    {% set ENABLE = params.ENABLE|default(1)|int != 0 %}
    {% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
    SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
    {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
    {% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
    {% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
    {% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
    SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
    {% if pause_next_layer.enable %}
        RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
        {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
        SET_PAUSE_NEXT_LAYER ENABLE=0
    {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
        RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
        {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
        SET_PAUSE_AT_LAYER ENABLE=0
    {% endif %}
    SET_PRINT_STATS_INFO_BASE {rawparams}
